<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<document NS1:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd" 
xmlns="http://maven.apache.org/XDOC/2.0" xmlns:NS1="http://www.w3.org/2001/XMLSchema-instance">
    <properties>
        <title>XML / JSON Playlist Support</title>
    </properties>
    <head>
        <meta name="description" content="Parse ASX / XSPF playlist formats"></meta>
    </head>
    <body>
        <section name="JSON / XML Playlist Support">
            <p>BST Player 1.3 instroduced support for XML/JSON based playlist formats. 
            Currently only ASX, XSPF and JSPF playlist formats are supported. </p>
            
            <subsection name="The required module">
                <p>Your application should inherit the
                    <i>com.bramosystems.oss.player.playlist.Playlist</i> module for this to work.
                </p>
            </subsection>
            
            <subsection name="The playlist parser factory">
                <p>The <code>com.bramosystems.oss.player.playlist.client.PlaylistFactory</code> class 
                provides static methods to parse the supported plalist formats to POJO objects.  The POJO
                objects provide methods and properties to access the underlying data.
                </p>
            </subsection>
            <subsection name="Working with playlists">
                <p>Assuming we have the following playlist in JSPF format generated by some server side code 
                (it is also possible to have it as a JSON file anyway):
                </p>
                <source>{
    "playlist" : {
       "title"         : "Sample JSPF Playlist Example",
       "creator"       : "Sikiru Braheem",
       "annotation"    : "Sample playlist created for BST Player API",
       "info"          : "http://oss.bramosystems.com/bst-player",
       "location"      : "http://oss.bramosystems.com/bst-player/demo/showcase/",
       "identifier"    : "201106_playlists_jspf",
       "date"          : "2011-05-08T17:10:47+01:00",
       "license"       : "http://creativecommons.org/licenses/by/3.0/",
       "track"         : [
        {  "location"      : ["applause.mp3"],
           "identifier"    : ["idx1"],
           "title"         : "Applause",
           "creator"       : "Unknown",
           "annotation"    : "Just an applause",
           "album"         : "Sample Playlist",
           "trackNum"      : 1,
           "duration"      : 5000 },
 
       {   "location"      : ["big-buck-bunny.mp4"],
           "identifier"    : ["idx2"],
           "title"         : "Big Buck Bunny",
           "creator"       : "Blender Foundation | www.blender.org",
           "annotation"    : "Big Buck Bunny Preview",
           "info"          : "www.bigbuckbunny.org",
           "album"         : "Sample Playlist",
           "trackNum"      : 2,
           "duration"      : 60000 },
 
       {   "location"      : ["traffic.flv"],
           "identifier"    : ["idx3"],
           "title"         : "Evening traffic shot",
           "creator"       : "Sikiru Braheem",
           "annotation"    : "Evening Traffic Shot",
           "info"          : "sbraheem /at/ bramosystems /dot/ com",
           "album"         : "Sample Playlist",
           "trackNum"      : 3,
           "duration"      : 10000 }
       ]
   }
 }</source>

 <p>The example below illustrates how to use the playlist with the player widgets:</p>
 
<source>
RequestBuilder rb = new RequestBuilder(RequestBuilder.GET, 
        "http://example.com/playlists/sample-playlist-in-jspf-format.json");
rb.sendRequest(null, new RequestCallback() {
  
    public void onResponseReceived(Request request, Response response) {
        // parse playlist data to SPFPlaylist object
        SPFPlaylist pl = PlaylistFactory.parseJspfPlaylist(response.getText());
  
        // once available we can work with the various fields ...
        GWT.log("Playlist Title   : " + pl.getTitle());
        GWT.log("Playlist Creator : " + pl.getInfo());
  
        // see the entries in the playlist ...
        JsArray&lt;Track&gt; ts = pl.getTracks();
        for (int i = 0; i &lt; ts.length(); i++) {
            Track t = ts.get(i);
            GWT.log("Track Title   : " + t.getTitle());
            GWT.log("Track Creator : " + t.getCreator());
            GWT.log("Track URL     : " + t.getLocation());
        }
  
        // if we had an existing player widget, we can add this playlist 
        // to the player as well ...
        playerWidget.addToPlaylist(pl.toPlaylist());
   }
  
   public void onError(Request request, Throwable exception) {}
});</source>

<p>Other supported playlist formats can be used in a similar way with the <code>PlaylistFactory</code>.</p>
            </subsection>
        </section>
    </body>
</document>
