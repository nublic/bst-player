<?xml version="1.0" encoding="UTF-8"?>

<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

    <properties>
        <title>Event Handling</title>
    </properties>
    <head>
        <meta name="description" content="Handling events generated by player widget" />
    </head>
    <body>
        <section name="Event Handling">

            <p>
                The API defines handler interfaces for various player events.  With these handlers, different
                implementations can be provided to build a rich multimedia experience.
            </p>
            <p>
                The following table describes the various handlers and supported player events
            </p>

            <table>
                <tr>
                    <th>Handler</th>
                    <th>Event types</th>
                    <th>Description</th>
                </tr>
                <tr>
                    <td>PlayerStateHandler</td>
                    <td><code>PlayerStateEvent.State.Ready</code></td>
                    <td>player is initialized and ready for interaction</td>
                </tr>
                <tr>
                    <td></td>
                    <td><code>PlayerStateEvent.State.BufferingStarted</code></td>
                    <td>player has started buffering</td>
                </tr>
                <tr>
                    <td></td>
                    <td><code>PlayerStateEvent.State.BufferingFinished</code></td>
                    <td>player has stopped buffering</td>
                </tr>
                <tr>
                    <td></td>
                    <td><code>PlayerStateEvent.State.DimensionChangedOnVideo</code></td>
                    <td>the dimension of the player has changed to match the size of the
                    current media, especially video</td>
                </tr>
                <tr>
                    <td></td>
                    <td><code>PlayerStateEvent.State.FullScreenStarted</code></td>
                    <td>the player has entered into fullscreen display mode</td>
                </tr>
                <tr>
                    <td></td>
                    <td><code>PlayerStateEvent.State.FullScreenFinished</code></td>
                    <td>the player has entered normal display mode from fullscreen</td>
                </tr>

                <tr>
                    <td>PlayStateHandler</td>
                    <td><code>PlayerState.State.Started</code></td>
                    <td>playback has started</td>
                </tr>
                <tr>
                    <td></td>
                    <td><code>PlayerState.State.Finished</code></td>
                    <td>playback has finished</td>
                </tr>
                <tr>
                    <td></td>
                    <td><code>PlayerState.State.Paused</code></td>
                    <td>playback is currently paused</td>
                </tr>
                <tr>
                    <td></td>
                    <td><code>PlayerState.State.Stopped</code></td>
                    <td>playback is currently stopped</td>
                </tr>

                <tr>
                    <td>LoadingProgressHandler</td>
                    <td><code>LoadingProgressEvent</code></td>
                    <td>fired when media download progress has changes</td>
                </tr>

                <tr>
                    <td>MediaInfoHandler</td>
                    <td><code>MediaInfoEvent</code></td>
                    <td>fired when media metadata is available</td>
                </tr>

                <tr>
                    <td>DebugHandler</td>
                    <td><code>DebugEvent.MessageType.Info</code></td>
                    <td>fired for typical INFO level messages</td>
                </tr>
                <tr>
                    <td></td>
                    <td><code>DebugEvent.MessageType.Error</code></td>
                    <td>fired when severe error occurs</td>
                </tr>
            </table>

            <subsection name="Example">
                <p>Here is an example:</p>

                <source>
SimplePanel panel = new SimplePanel();   // create panel to hold the player
try {
     // get any player that can playback media
     AbstractMediaPlayer player = PlayerUtil.getPlayer(Plugin.AUTO,
            "http://www.example.com/media.mp3", false, "50px", "100%");
     player.addDebugHandler(new DebugHandler() {

        @Override
        public void onDebug(DebugEvent event) {
            switch(event.getMessageType()) {
                case Info:
                case Error:
                    GWT.log(event.getMessage());
            }
        }
     });
     panel.setWidget(player); // add player to panel.
} catch(LoadException e) {
     // catch loading exception and alert user
     Window.alert("An error occured while loading");
} catch (PluginVersionException ex) {
     // catch PluginVersionException, thrown if required plugin version is not found
     panel.setWidget(PlayerUtil.getMissingPluginNotice(e.getPlugin()));
} catch(PluginNotFoundException e) {
     // catch PluginNotFoundException, thrown if no plugin is not found
     panel.setWidget(PlayerUtil.getMissingPluginNotice(e.getPlugin()));
}</source>
            </subsection>
        </section>
    </body>
</document>